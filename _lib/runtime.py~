# Deals with runtime data

class Runtime:
    def __init__(self, **kwargs):
        self.live = {
            # Mode
            # - A mode consists of several mode bits
            "mode": int(0b000000000000),

            # Current location
            # @mapcode: unique map code
            # @loc:     (x, y) location in map
            "mapcode": int(0),
            "loc" = [int(0), int(0],
            
            # Battle data
            # - Only used in battle phase
            "inbattle" = {
                # Current turn
                # - start with 1
                "turn": int(0),

                # Character live information
                # - Initialized using...
                #   - Orignal character data
                #   - Map/event data
                "char": {
                    # Current/max HP
                    "hp_cur": int(0),
                    "hp_max": int(0),

                    # Action point
                    # - Almost all the actions consume action point
                    # - 
                    "act_cur": int(0),
                    "act_max": int(0),

                    # Several stats
                    "atk": int(0),
                    "def": int(0),
                    "",
                }
                "enemy": {
                    "hp_cur": int(0),
                    "hp_max": int(0),

                },
            }
        }

        self.config = {
            "sys": {},
            "ingame": {},
        }


    ##############
    # Interfaces #
    ##############
    
    # Load all the data at initialization, from both local and remote
    # @return: returns 0 if success
    #          returns nonzero value otherwise
    def LoadAll(self):
        pass

    # Store all the data at initialization, to both local and remote
    # @return: returns 0 if success
    #          retunrs nonzero value otherwise
    def StoreAll(self):
        pass

    def Load(self, **kwargs):
        pass
    
    def Store(self, **kwargs):
        pass

    def GetLocal(self, key):
        pass

    ####################
    # Internal methods #
    ####################
    
    # Set all/specific data to default value
    # @key: key to set
    #       if None is given, all the data is set to default
    def set_default(self, key=None, **kwargs):
        pass

    def load_local(self, key, **kwargs):
        pass

    def load_remote(self, key, **kwargs):
        pass

    def store_local(self, key, **kwargs):
        pass

    def store_remote(self, key, **kwargs):
        pass
    
    
     
